package org.openape.api.group;

import java.util.List;

/**
 * This class defines a group. A group has members. Some of those members can also be admins of the group. Group admins
 * are allowed to edit a group and their memberships. The registry server uses groups to manage the access rights for
 * the concepts. For each concept it is defined which group is allowed to read, update and delete it. Thus which access
 * right an user has, depends on his group member ships.
 * 
 * This class is not thread safe.
 * 
 * @author Tobias Ableitner
 *
 */
public class Group {

	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************
	// attributes
	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************

	/**
	 * Group's id.
	 */
	private int id;

	/**
	 * Group's name.
	 */
	private String name;

	/**
	 * Users who are members of the group.
	 */
	private List<GroupMember> members;

	
	
	
	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************
	// constructors
	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************

	/**
	 * Create a new group and set's the value of {@link Group#id} to -1. This constructor should be used, to instantiate groups, which are not already stored in the database.
	 * @param name the name of the group. It must not be null or empty. Otherwise an {@link IllegalArgumentException} will be thrown.
	 * @param members list with the members of this the group. If the group has no member(s) it can be empty but not null. If it is null, an {@link IllegalArgumentException} will be thrown.
	 */
	public Group(String name, List<GroupMember> members){
		this(-1, name, members);
	}
	
	/**
	 * Create a new group. This constructor should be used, to instantiate groups, which are already stored in the database.
	 * @param id the id of the group. It must be greater equals 1. Otherwise an {@link IllegalArgumentException} will be thrown.
	 * @param name the name of the group. It must not be null or empty. Otherwise an {@link IllegalArgumentException} will be thrown.
	 * @param members list with the members of this the group. If the group has no member(s) it can be empty but not null. If it is null, an {@link IllegalArgumentException} will be thrown.
	 */
	public Group(int id, String name, List<GroupMember> members){
		this.setId(id);
		this.setName(name);
		this.setMembers(members);
	}
	


	
	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************
	// getters and setters
	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************

	public int getId() {
		return this.id;
	}

	public void setId(int id) {
		//Checker.checkIntegerGreaterEquals(id, "id", -1);
		this.id = id;
	}

	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		//Checker.checkNullAndEmptiness(name, "name");
		this.name = name;
	}

	public List<GroupMember> getMembers() {
		return this.members;
	}

	public void setMembers(List<GroupMember> members) {
		//Checker.checkNull(members, "members");
		this.members = members;
	}
	
	


	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************
	// abstract methods
	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************

	
	

	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************
	// override methods
	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************

	public boolean isUserGroupAdmin(int userId){
		//Checker.checkUserId(userId);
		boolean isGroupAdmin = false;
		for(GroupMember groupMember : this.members){
			if(groupMember.getUserId() == userId){
				if(groupMember.isGroupAdmin()){
					isGroupAdmin = true;
				}
				break;
			}
		}
		return isGroupAdmin;
	}



	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************
	// public methods
	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************




	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************
	// protected methods
	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************




	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************
	// private methods
	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************




	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************
	// inner classes
	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************

}
