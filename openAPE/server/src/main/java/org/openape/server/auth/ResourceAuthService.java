package org.openape.server.auth;

import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import org.bson.Document;
import org.openape.api.Resource;
import org.openape.api.user.User;
import org.openape.server.api.group.Group;
import org.openape.server.database.mongoDB.DatabaseConnection;
import org.openape.server.database.mongoDB.MongoCollectionTypes;

import com.mongodb.BasicDBObject;

import spark.Request;
import spark.Response;

/**
 * This class is the authentication service for resources. It checks if the
 * logged in user is allowed to do an action with an resource or not. Therefore
 * it checks, whether the logged in user is an OpenAPE admin, the owner of the
 * resource or a member of a group, which has the needed right.
 *
 * @author Tobias Ableitner
 *
 */
public class ResourceAuthService extends AuthService {

	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************
	// attributes
	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************




	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************
	// constructors
	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************




	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************
	// getters and setters
	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************




	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************
	// abstract methods
	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************




	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************
	// override methods
	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************




	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************
	// public methods
	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************

	public void allowDeleting(final Request request, final Response response, final Resource resource)
			throws UnauthorizedException {
		// TODO implement
	}

	public void allowReading(final Request request, final Response response, final Resource resource)
			throws UnauthorizedException {
		// TODO implement
	}

	public void allowRightsChanging(final Request request, final Response response, final Resource resource)
			throws UnauthorizedException {
		// TODO implement
	}

	public void allowUpdating(final Request request, final Response response, final Resource resource)
			throws UnauthorizedException {
		// TODO implement
	}




	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************
	// protected methods
	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************




	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************
	// private methods
	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************

	private List<Group> getGroupsWithUserAsMember(final User user) throws IOException, UnauthorizedException {
		final DatabaseConnection databaseConnection = DatabaseConnection.getInstance();

		final BasicDBObject elemMatch = new BasicDBObject();
		elemMatch.put("userId", user.getId());
		// TODO remove hard coded state values
		elemMatch.put("state", new Document("$in", Arrays.asList("MEMBER", "ADMIN")));
		final BasicDBObject members = new BasicDBObject();
		members.put("$elemMatch", elemMatch);
		final BasicDBObject query = new BasicDBObject();
		query.put("members", members);

		final List groups = databaseConnection.getDocumentsByQuery(MongoCollectionTypes.GROUPS, query, true);
		return groups;
	}



	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************
	// inner classes
	// *********************************************************************************************************************************************
	// *********************************************************************************************************************************************

}
